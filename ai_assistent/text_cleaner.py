import re
import html
import json
import logging

logger = logging.getLogger(__name__)


def clean_text(text: str) -> str:
    """
    –û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –∏ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    """
    if not text or not isinstance(text, str):
        return text

    # 1. –î–µ–∫–æ–¥–∏—Ä—É–µ–º HTML entities
    cleaned = html.unescape(text)

    # 2. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä—É JSON
    neural_artifacts = [
        r'„Äê\d+:\d+‚Ä†(source|source)„Äë',
        r'‚Äπ+.*?‚Ä∫+',
        r'¬´+.*?¬ª+',
        r'‚á•.*?‚á§',
        r'<.*?>',
    ]

    for pattern in neural_artifacts:
        cleaned = re.sub(pattern, '', cleaned)

    # 3. –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç–º–æ–¥–∑–∏ –∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
    special_chars = [
        '‚Ä†', '‚á•', '‚á§', '‚Äπ', '‚Ä∫', '¬´', '¬ª',
        '‚ú®', 'üöÄ', 'üìà', 'üìä', 'üí±', 'üíé', 'üî•', '‚≠ê', 'üåü',
        '‚ñ™', '‚Ä¢', '‚Üí', '‚Üê', '‚Üë', '‚Üì', '‚Üî', '‚Üï', '‚áí', '‚áî', '‚áÑ', '‚áÜ',
    ]

    for char in special_chars:
        cleaned = cleaned.replace(char, '')

    # 4. –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    cleaned = re.sub(r'\s+', ' ', cleaned).strip()

    return cleaned


def clean_json_response(text: str) -> str:
    """
    –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–ª—è JSON-–æ—Ç–≤–µ—Ç–æ–≤
    """
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ JSON –≤ —Ç–µ–∫—Å—Ç–µ
    json_match = re.search(r'\{.*\}', text, re.DOTALL)
    if not json_match:
        return ''

    cleaned = json_match.group(0)

    # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–ø—Ä–∞–≤–ª—è—é—â–∏–µ —Å–∏–º–≤–æ–ª—ã
    cleaned = re.sub(r'[\x00-\x1F\x7F-\x9F]', '', cleaned)

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –æ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
    cleaned = clean_text(cleaned)

    return cleaned


def safe_json_parse(text: str) -> dict:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ JSON
    """
    try:
        return json.loads(text)
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return {}